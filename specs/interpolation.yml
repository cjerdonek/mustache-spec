overview: |
  Interpolation tags are used to integrate dynamic content into the template.

  The tag's content MUST be a non-whitespace character sequence NOT containing
  the current closing delimiter.

  This tag's content names the data to replaceÂ the tag.  Name resolution is as
  follows:
    1) Walk the context stack from top to bottom, finding the first context
    that is a) a hash containing the name as a key OR b) an object responding
    to a method with the given name.
    2) If the context is a hash, the data is the value associated with the
    name.
    3) If the context is an object, the data is the value returned by the
    method with the given name.
  Data should be coerced into a string (and escaped, if appropriate) before
  interpolation.

  The Interpolation tags MUST NOT be treated as standalone.
tests:
  - name: No Interpolation
    desc: Mustache-free templates should render as-is.
    data: { }
    template: |
      Hello from {Mustache}!
    expected: |
      Hello from {Mustache}!

  - name: Basic Interpolation
    desc: Unadorned tags should interpolate content into the template.
    data: { subject: "world" }
    template: |
      Hello, {{subject}}!
    expected: |
      Hello, world!

  - name: No Re-interpolation
    desc: Interpolated tag output should not be re-interpolated.
    data: { template: '{{planet}}', planet: 'Earth' }
    template: '{{template}}: {{planet}}'
    expected: '{{planet}}: Earth'

  - name: HTML Escaping
    desc: Basic interpolation should be HTML escaped.
    data: { forbidden: '& " < >' }
    template: |
      These characters should be HTML escaped: {{forbidden}}
    expected: |
      These characters should be HTML escaped: &amp; &quot; &lt; &gt;

  - name: Triple Mustache
    desc: Triple mustaches should interpolate without HTML escaping.
    data: { forbidden: '& " < >' }
    template: |
      These characters should not be HTML escaped: {{{forbidden}}}
    expected: |
      These characters should not be HTML escaped: & " < >

  - name: Ampersand
    desc: Ampersand should interpolate without HTML escaping.
    data: { forbidden: '& " < >' }
    template: |
      These characters should not be HTML escaped: {{&forbidden}}
    expected: |
      These characters should not be HTML escaped: & " < >

  - name: Basic Integer Interpolation
    desc: Integers should interpolate seamlessly.
    data: { mph: 85 }
    template: '"{{mph}} miles an hour!"'
    expected: '"85 miles an hour!"'

  - name: Triple Mustache Integer Interpolation
    desc: Integers should interpolate seamlessly.
    data: { mph: 85 }
    template: '"{{{mph}}} miles an hour!"'
    expected: '"85 miles an hour!"'

  - name: Ampersand Integer Interpolation
    desc: Integers should interpolate seamlessly.
    data: { mph: 85 }
    template: '"{{&mph}} miles an hour!"'
    expected: '"85 miles an hour!"'

  - name: Basic Decimal Interpolation
    desc: Decimals should interpolate seamlessly with proper significance.
    data: { power: 1.210 }
    template: '"{{power}} jiggawatts!"'
    expected: '"1.21 jiggawatts!"'

  - name: Triple Mustache Decimal Interpolation
    desc: Decimals should interpolate seamlessly with proper significance.
    data: { power: 1.210 }
    template: '"{{{power}}} jiggawatts!"'
    expected: '"1.21 jiggawatts!"'

  - name: Ampersand Decimal Interpolation
    desc: Decimals should interpolate seamlessly with proper significance.
    data: { power: 1.210 }
    template: '"{{&power}} jiggawatts!"'
    expected: '"1.21 jiggawatts!"'

  # Context Misses

  - name: Basic Context Miss Interpolation
    desc: Failed context lookups should default to empty strings.
    data: { }
    template: "I ({{cannot}}) be seen!"
    expected: "I () be seen!"

  - name: Triple Mustache Context Miss Interpolation
    desc: Failed context lookups should default to empty strings.
    data: { }
    template: "I ({{{cannot}}}) be seen!"
    expected: "I () be seen!"

  - name: Ampersand Context Miss Interpolation
    desc: Failed context lookups should default to empty strings.
    data: { }
    template: "I ({{&cannot}}) be seen!"
    expected: "I () be seen!"

  # Whitespace Sensitivity

  - name: Interpolation - Surrounding Whitespace
    desc: Interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: '| {{string}} |'
    expected: '| --- |'

  - name: Triple Mustache - Surrounding Whitespace
    desc: Interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: '| {{{string}}} |'
    expected: '| --- |'

  - name: Ampersand - Surrounding Whitespace
    desc: Interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: '| {{&string}} |'
    expected: '| --- |'

  - name: Interpolation - Standalone
    desc: Standalone interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: "  {{string}}\n"
    expected: "  ---\n"

  - name: Triple Mustache - Standalone
    desc: Standalone interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: "  {{{string}}}\n"
    expected: "  ---\n"

  - name: Ampersand - Standalone
    desc: Standalone interpolation should not alter surrounding whitespace.
    data: { string: '---' }
    template: "  {{&string}}\n"
    expected: "  ---\n"

  # Whitespace Insensitivity

  - name: Interpolation With Padding
    desc: Superfluous in-tag whitespace should be ignored.
    data: { string: "---" }
    template: '|{{ string }}|'
    expected: '|---|'

  - name: Triple Mustache With Padding
    desc: Superfluous in-tag whitespace should be ignored.
    data: { string: "---" }
    template: '|{{{ string }}}|'
    expected: '|---|'

  - name: Ampersand With Padding
    desc: Superfluous in-tag whitespace should be ignored.
    data: { string: "---" }
    template: '|{{& string }}|'
    expected: '|---|'
